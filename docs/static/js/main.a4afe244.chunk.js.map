{"version":3,"sources":["backend/models.ts","backend/api.service.ts","store/tasks/Tasks.js","store/users/Users.js","store/Reducer.js","store/store.js","components/layout/Layout.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Ticket","id","description","completed","assigneeId","Object","classCallCheck","this","User","name","randomizeDelay","Math","random","delayBy","byMs","Promise","resolve","setTimeout","logApiCall","api","console","log","concat","logApiGET","logApiPOST","payload","JSON","stringify","usersDB","lastId","ticketsDB","ApiServer","text","then","matching","filter","t","indexOf","Error","newTicket","push","ticketId","matchingTicket","matchingUser","u","taskFetchGen","taskAddGen","taskAssingGen","taskCompleteGen","taskActionType","Tasks","createClass","key","value","state","arguments","length","undefined","tasks","loading","action","type","objectSpread","regenerator_default","a","wrap","_context","prev","next","put","call","tickets","sent","fill","stop","_marked","_context2","fetch","_marked2","_context3","assign","t0","_marked3","_context4","complete","_marked4","sagas","takeLatest","usersFetchGen","userActionType","Users","users","map","user","Users_marked","combineReducers","tasksData","reducer","usersData","watchSaga","logger","createLogger","sagaMiddleware","createSagaMiddleware","middleware","applyMiddleware","createStore","all","toConsumableArray","store_marked","run","Layout","props","_this","possibleConstructorReturn","getPrototypeOf","nextTask","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","dispatch","add","preventDefault","newComplete","_this2","react_default","createElement","className","task","style","color","onClick","renderUserList","onSubmit","onChange","fetchData","taskId","_this3","_loop","i","React","Component","connect","App","es","store","layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","components_app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4afe244.chunk.js","sourcesContent":["export class Ticket {\r\n  constructor(\r\n    public readonly id: number,\r\n    public description: string,\r\n    public completed: boolean,\r\n    public assigneeId: number | null\r\n  ) {}\r\n}\r\n\r\nexport class User {\r\n  constructor(\r\n    public readonly id:number, \r\n    public name: string) {\r\n      \r\n    }\r\n}\r\n","import { Ticket,User } from \"./models\";\n\nconst randomizeDelay = () => Math.random() * 4000;\nconst delayBy = (byMs: any) => new Promise(resolve => setTimeout(() => resolve(), byMs));\n\nconst logApiCall = (api: any) => console.log(`API call was made to endpoint: [${api}]`);\nconst logApiGET = (api: any) => logApiCall(`GET: ${api}`);\nconst logApiPOST = (api: any, payload?: {\n    description?: string ,\n    ticketId?: number,\n    assigneeId?: number,\n    completed?: boolean\n}) =>\n  logApiCall(`POST: ${api}` + (payload ? `, payload:${JSON.stringify(payload, null, 2)}` : \"\"));\n\nlet usersDB = [\n  new User(111, \"Julie\"),\n  new User(222, \"Hank\"),\n  new User(333, \"Al\")\n];\n\nlet lastId = 1;\nlet ticketsDB = [\n  new Ticket(0, \"Install a monitor arm\", false, 111),\n  new Ticket(1, \"Move the desk to the new location\", false, 111)\n];\n\nclass Api {\n\n  tickets(text?: string): Promise<Ticket[]> {\n    return delayBy(randomizeDelay())\n      .then(() => {\n        logApiGET(`tickets/${text || \"\"}`);\n        let matching;\n        if(text) {\n          matching = ticketsDB.filter(t => t.description.indexOf(text) !== -1);\n        } else {\n          matching = ticketsDB;\n        }\n\n        if (!matching) {    \n          throw new Error(`Cannot find ticket`);      \n        } \n        return matching;\n      });\n  }\n\n  ticket(id: number): Promise<Ticket> {\n    return delayBy(randomizeDelay())\n      .then(() => {\n        logApiGET(`ticket/${id}`);\n        const matching = ticketsDB.filter(t => t.id === +id)[0];\n        if (!matching) {\n          throw new Error(`Cannot find ticket ${+id}`);\n        } \n        return matching;\n      });\n  }\n\n  newTicket(payload: { description: string }): Promise<Ticket> {\n    return delayBy(randomizeDelay())\n      .then(() => {\n        logApiPOST(\"newTicket\", payload);\n        if (!payload.description) {\n          throw new Error(`Description is a required field`);\n        }\n        const newTicket = new Ticket(++lastId, payload.description, false, null);\n        ticketsDB.push(newTicket);\n        return newTicket;\n      });\n  }\n\n\n  assign(ticketId: number, assigneeId: number): Promise<Ticket> {\n    return delayBy(randomizeDelay())\n      .then(() => {    \n        logApiPOST(\"assign\", {ticketId, assigneeId});\n        const matchingTicket = ticketsDB.filter(t => t.id === ticketId)[0];\n        const matchingUser = usersDB.filter(u => u.id === assigneeId)[0];\n    \n        if (!matchingTicket) {\n          throw new Error(`Cannot find ticket ${ticketId}`)\n        } else if (!matchingUser) {\n          throw new Error(`Cannot find user ${assigneeId}`);\n        }\n\n        matchingTicket.assigneeId = assigneeId;\n        return matchingTicket;\n      });\n  }\n\n  complete(ticketId: number, completed: boolean): Promise<Ticket> {\n    return delayBy(randomizeDelay())\n      .then(() => {    \n        logApiPOST(\"complete\", {ticketId, completed});\n        const matchingTicket = ticketsDB.filter(t => t.id === ticketId)[0];\n    \n        if (!matchingTicket) {\n          throw new Error(`Cannot find ticket ${ticketId}`);\n        } \n\n        matchingTicket.completed = completed;\n        return matchingTicket;\n      });\n  }\n\n\n  users(): Promise<User[]> {\n    return delayBy(randomizeDelay()).then(() => {\n      logApiGET(\"users\");\n      return usersDB;\n    });\n  }\n\n  user(id: number): Promise<User> {\n    return delayBy(randomizeDelay())\n      .then(() => {\n        logApiGET(`users/${id}`);        \n        const matching = usersDB.filter(t => t.id === +id)[0];\n        if (!matching) {\n          throw new Error(`Cannot find user ${+id}`);\n        }         \n        return matching;\n      });\n  }\n\n}\nexport const ApiServer = new Api();\n","import {ApiServer} from '../../backend/api.service.ts'\r\nimport {put, call, takeLatest} from 'redux-saga/effects';\r\n\r\nconst taskActionType = {\r\n    FETCH: 'TASK_FETCH',\r\n    LOADING: 'TASK_LOADING_STATUS_CHANGE',\r\n    FILL: 'TASK_FILL',\r\n    ADD: 'TASK_ADD',\r\n    ASSIGN: 'ASSIGN',\r\n    COMPLETE: 'TASK_COMPLETE'\r\n};\r\n\r\nexport class Tasks {\r\n    static reducer(state = {tasks: [], loading: false},\r\n                   action) {\r\n\r\n        switch (action.type) {\r\n            case taskActionType.LOADING: {\r\n                return {\r\n                    ...state,\r\n                    loading: action.payload.loading,\r\n                }\r\n            }\r\n            case taskActionType.FILL: {\r\n                return {\r\n                    tasks: action.payload.tasks,\r\n                    loading: false,\r\n                }\r\n            }\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return state\r\n    }\r\n\r\n    static fetch() {\r\n        return {\r\n            type: taskActionType.FETCH,\r\n        }\r\n    }\r\n\r\n    static loading(loading) {\r\n        return {\r\n            type: taskActionType.LOADING,\r\n            payload: {loading: loading}\r\n        }\r\n    }\r\n\r\n    static add(description) {\r\n        if (typeof description === 'string') {\r\n            return {\r\n                type: taskActionType.ADD,\r\n                payload: description\r\n            }\r\n        } else {\r\n            console.log('Description must be string')\r\n        }\r\n    }\r\n\r\n    static complete(id, completed) {\r\n        if (typeof id === 'number') {\r\n            return {\r\n                type: taskActionType.COMPLETE,\r\n                payload: {\r\n                    id: id,\r\n                    completed: completed\r\n                }\r\n            }\r\n        } else {\r\n            console.log('Task ID must be a number')\r\n        }\r\n    }\r\n\r\n    static fill(tasks) {\r\n        return {\r\n            type: taskActionType.FILL,\r\n            payload: {tasks: tasks}\r\n        }\r\n\r\n    }\r\n\r\n    static assign(ticketId, assigneeId) {\r\n\r\n            return {\r\n                type: taskActionType.ASSIGN,\r\n                payload: {\r\n                    ticketId: ticketId,\r\n                    assigneeId: assigneeId\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n    static sagas = [\r\n        takeLatest(taskActionType.FETCH, taskFetchGen),\r\n        takeLatest(taskActionType.ADD, taskAddGen),\r\n        takeLatest(taskActionType.ASSIGN, taskAssingGen),\r\n        takeLatest(taskActionType.COMPLETE, taskCompleteGen),\r\n    ];\r\n}\r\n\r\nfunction* taskFetchGen() {\r\n    yield put(Tasks.loading(true));\r\n    let tasks = yield call (ApiServer.tickets);\r\n    yield  console.log(tasks);\r\n    yield put (Tasks.fill(tasks));\r\n}\r\nfunction* taskAddGen(action) {\r\n    yield put(Tasks.loading(true));\r\n    yield call (ApiServer.newTicket, {description: action.payload});\r\n    yield put (Tasks.fetch());\r\n}\r\n\r\nfunction* taskAssingGen(action) {\r\n    yield put(Tasks.loading(true));\r\n    try {\r\n        yield call (ApiServer.assign, action.payload.ticketId, action.payload.assigneeId);\r\n        yield put (Tasks.fetch());\r\n    } catch (error) {\r\n        yield put(console.log(error));\r\n    }\r\n}\r\nfunction* taskCompleteGen(action) {\r\n    yield put(Tasks.loading(true));\r\n\r\n    try {\r\n        yield call(ApiServer.complete, action.payload.id, action.payload.completed);\r\n        yield put (Tasks.fetch());\r\n    } catch (error) {\r\n        yield put(console.log(error));\r\n    }\r\n\r\n}","import {ApiServer} from '../../backend/api.service.ts'\r\nimport {put, call, takeLatest} from 'redux-saga/effects';\r\n\r\nconst userActionType = {\r\n    FETCH: 'USERS_FETCH',\r\n    LOADING: 'USERS_LOADING_STATUS_CHANGE',\r\n    FILL: 'USERS_FILL',\r\n};\r\n\r\nexport class Users {\r\n    static reducer(state = {users: {}, loading: false},\r\n                   action) {\r\n\r\n        switch (action.type) {\r\n            case userActionType.LOADING: {\r\n                return {\r\n                    ...state,\r\n                    loading: action.payload.loading,\r\n                }\r\n            }\r\n            case userActionType.FILL: {\r\n                const users = {};\r\n                action.payload.users.map((user) => users[user.id] = user);\r\n                return {\r\n                    users: users,\r\n                    loading: false,\r\n                }\r\n            }\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return state\r\n    }\r\n\r\n    static fetch() {\r\n        return {\r\n            type: userActionType.FETCH,\r\n        }\r\n    }\r\n\r\n    static loading(loading) {\r\n        return {\r\n            type: userActionType.LOADING,\r\n            payload: {loading: loading}\r\n        }\r\n    }\r\n\r\n\r\n    static fill(users) {\r\n        return {\r\n            type: userActionType.FILL,\r\n            payload: {users: users}\r\n        }\r\n\r\n    }\r\n\r\n    static sagas = [\r\n        takeLatest(userActionType.FETCH, usersFetchGen),\r\n    ];\r\n}\r\n\r\nfunction* usersFetchGen() {\r\n    yield put(Users.loading(true));\r\n    let users = yield call (ApiServer.users);\r\n    yield put (Users.fill(users));\r\n}\r\n","import {combineReducers} from \"redux\"\r\n\r\nimport {Tasks} from \"./tasks/Tasks\"\r\nimport {Users} from \"./users/Users\"\r\n\r\nexport default combineReducers({\r\n        tasksData: Tasks.reducer,\r\n        usersData: Users.reducer,\r\n    }\r\n)","import { applyMiddleware, createStore } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport createLogger from 'redux-logger';\r\nimport { all } from 'redux-saga/effects';\r\n\r\nimport reducer from './Reducer';\r\nimport {Tasks} from \"./tasks/Tasks\";\r\nimport {Users} from \"./users/Users\";\r\nconst logger=createLogger;\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middleware = applyMiddleware(sagaMiddleware, logger);\r\n\r\nexport default createStore(reducer, middleware);\r\n\r\nfunction* watchSaga() {\r\n    yield all([\r\n        ...Tasks.sagas,\r\n        ...Users.sagas\r\n    ]);\r\n}\r\nsagaMiddleware.run(watchSaga);\r\n\r\n","import React from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {Tasks} from '../../store/tasks/Tasks';\r\nimport {Users} from '../../store/users/Users';\r\nimport './Lyout.css';\r\n\r\nclass Layout extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {nextTask: ''};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({nextTask: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        this.props.dispatch(Tasks.add(this.state.nextTask));\r\n        event.preventDefault();\r\n        this.setState({nextTask: ''})\r\n    }\r\n\r\n    fetchData() {\r\n        this.props.dispatch(Tasks.fetch());\r\n        this.props.dispatch(Users.fetch());\r\n    }\r\n\r\n    complete(id) {\r\n        const newComplete = !this.props.tasksData.tasks[id].completed;\r\n        this.props.dispatch(Tasks.complete(id, newComplete));\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return <div>\r\n            <div>\r\n                Test Task of Daria Guketleva. TODO list\r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"titles\">\r\n                    <div className=\"description\">Description (click to complete)</div>\r\n                    <div className=\"assignee\">Assignee</div>\r\n                    <div className=\"assign\">Assign to (click to choose)</div>\r\n                </div>\r\n                {this.props.tasksData.tasks && this.props.tasksData.tasks.map((task) =>\r\n                    <div className={'row'}>\r\n                        <div\r\n                            className=\"description\"\r\n                            style={{color: task.completed ? 'green' : 'red',}}\r\n                            onClick={() => this.complete(task.id)}\r\n                        >\r\n                            {task.description}</div>\r\n                        <div className=\"assignee\">{this.props.usersData && this.props.usersData.users &&\r\n                        task.assigneeId && this.props.usersData.users[task.assigneeId] &&\r\n                        this.props.usersData.users[task.assigneeId].name}</div>\r\n                        <div className=\"assign\">\r\n                            {this.renderUserList(task.id)}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.nextTask}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <button>add</button>\r\n                </form>\r\n            </div>\r\n            {this.props.tasksData.loading && <div className={'loading'}>LOADING</div>}\r\n\r\n            <footer className=\"card-footer\">\r\n                &copy; Daria Guketleva 2019г.\r\n            </footer>\r\n        </div>\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData();\r\n    }\r\n\r\n    renderUserList(taskId) {\r\n        const users = [];\r\n        if (this.props.usersData) {\r\n            for (let i in this.props.usersData.users) {\r\n                users.push(<div\r\n                    onClick={() => this.props.dispatch(Tasks.assign(taskId, +i))}>\r\n                    {this.props.usersData.users[i].name}</div>)\r\n            }\r\n        }\r\n        return users\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        tasksData: state.tasksData,\r\n        usersData: state.usersData,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Layout);","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {Provider} from 'react-redux';\r\nimport store from '../../store/store';\r\n\r\n\r\nimport Layout from '../layout/Layout';\r\n\r\nclass App extends Component {\r\n    render() {\r\n\r\n\r\n        return (\r\n            <Provider store={store}>\r\n<Layout>\r\n\r\n</Layout>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}